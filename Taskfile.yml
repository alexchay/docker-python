# https://taskfile.dev
version: "3"

vars:
  PYTHON: python3
  SET_VENV: poetry run
  BASE_IMAGE_NAME: local/python-base
  BASE_IMAGE_TAG:
    sh: |
       echo $(./scripts/bash_helpers.sh get_image_tag)
  IMAGE_NAME: python
  IMAGE_TAG: '{{.BASE_IMAGE_TAG}}'
  DOCKER_BUILD_ARGS: >-
    --build-arg HTTP_PROXY --build-arg HTTPS_PROXY --build-arg NO_PROXY
    --build-arg CI_REGISTRY
  DOCKER_RUN_ARGS: >-
    -e HTTP_PROXY -e HTTPS_PROXY -e NO_PROXY
    -v $(pwd)/:/home/user/build/

includes:
  uv:
    taskfile: ./taskfiles/uv.yml

tasks:

  build-image:
    desc: Build docker image
    cmds:
      - |
        echo "Build from base image {{.BASE_IMAGE_NAME}}:{{.BASE_IMAGE_TAG}}"
        docker build {{.DOCKER_BUILD_ARGS}} \
        --build-arg BASE_IMAGE_NAME={{.BASE_IMAGE_NAME}} \
        --build-arg BASE_IMAGE_TAG={{.BASE_IMAGE_TAG}} \
        --progress plain \
        -t local/{{.IMAGE_NAME}}:{{.IMAGE_TAG}} .

  rebuild-image:
    desc: ReBuild docker image
    cmds:
      - task: build-image
        vars:
          DOCKER_BUILD_ARGS: '{{.DOCKER_BUILD_ARGS}} --no-cache'

  test-image:
    desc: Test docker image
    cmds:
      - |
        docker run --rm -it {{.DOCKER_RUN_ARGS}} \
        -e IMAGE_TAGS={{.IMAGE_TAG}} \
        local/{{.IMAGE_NAME}}:{{.IMAGE_TAG}} bash \
        -c "cd build && ./scripts/test.sh"

  build-and-test:
    desc: Build and test docker image
    cmds:
      - task: build-image
      - task: test-image

  dockerfile-check:
    desc: Run static analysis tool (linter) for Dockerfile
    cmds:
      - >-
          docker run --rm -it
          -v $(pwd):/app
          hadolint/hadolint:latest-alpine
          sh -c 'hadolint --version && cd app && echo "Checking..." && hadolint Dockerfile && echo "Done"'

  shell-check:
    desc: Run static analysis tool (linter) for shell scripts
    cmds:
      - >-
          docker run --rm -it
          -v $(pwd):/app
          koalaman/shellcheck-alpine:latest
          sh -c 'shellcheck --version && cd app && echo "Checking..." && shellcheck scripts/*.sh && echo "Done"'

  static-analysis:
    desc: Run code formatter check, linting, static type analysis
    cmds:
      - task: shell-check
      - task: dockerfile-check

  install:
    desc: Install required dependencies
    cmds:
      - uv sync --no-default-groups --no-install-project

  clean:
    desc: Clean up the installed dependencies
    cmds:
      - rm -rf .venv

  reinstall:
    desc: Clean up and reinstall required dependencies
    cmds:
      - task: clean
      - task: install

  update:
    desc: Update dependencies
    cmds:
      - uv sync

  bump-calver:
    desc: Bump Cal version
    cmds:
      - ./bump_calver_build.sh